#pragma once

#include <util/generic/string.h>

namespace NAlice::NContacts {

const TString CONTACTS_DEBUG_CONSTANT = ",";

} // namespace NAlice::NContacts
