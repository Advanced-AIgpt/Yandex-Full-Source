//
// Autogenerated file
// Don't edit it manually!
// Owner: {{system.user}}, Generation time: {{system.time}}
//

// Forward class declarations
                                                                                            {%- for class in config.messages %}
class {{class}};
                                                                                            {%- endfor %}

class TSampleProto {
public:
    //
    // Enum declarations
    //
                                                                                            {%- for e in messages.TSampleProto.enums %}
    enum class {{e.name}} {
                                                                                                {%- for ee in e.values %}
        {{ee.name_ucamelcase}} = {{ee.value}}                                                       {%- if not loop.last -%},{%- endif -%}
                                                                                                {%- endfor %}
    };
                                                                                            {%- endfor %}
    //
    // Internal classes declarations
    //
                                                                                            {%- for nested_msg in messages.TSampleProto.messages %}
    class {{nested_msg.name}} {
        // TODO: this example doesn't support nested class declaration
    };
                                                                                            {%- endfor %}
    //
    // Internal union declarations
    //
                                                                                            {%- for field in messages.TSampleProto.oneofs %}
    typedef std::variant<
                                                                                                {%- for u in field.fields %}
        {{u.type_cpp.full}}                                                                             {%- if not loop.last -%},{%- endif -%}
                                                                                                {%- endfor %}
    > {{field.type}};
                                                                                            {%- endfor %}
private:
    //
    // Field declarations
    //
                                                                                            {%- for field in messages.TSampleProto.fields -%}
                                                                                                {%- for c in field.comments %}
    {{c}}
                                                                                                {%- endfor %}
    {{field.type_cpp.full}} {{field.name}};
                                                                                            {%- endfor %}
                                                                                            {%- for field in messages.TSampleProto.oneofs %}
    {{field.type}} {{field.name}};
                                                                                            {%- endfor %}
public:
    //
    // Field accessors
    //
                                                                                            {%- for field in messages.TSampleProto.fields %}

                                                                                                    {%- if field.is_simple %}
    void Set{{field.name}}({{field.type_cpp.full}} {{field.name_lcamelcase}}) {
        {{field.name}} = {{field.name_lcamelcase}};
    }
    {{field.type_cpp.full}} Get{{field.name}}() const {
        return {{field.name}};
    }
                                                                                                    {%- else %}
    void Set{{field.name}}(const {{field.type_cpp.full}}& {{field.name_lcamelcase}}) {
        {{field.name}} = {{field.name_lcamelcase}};
    }
    {{field.type_cpp.full}}& Get{{field.name}}() {
        return {{field.name}};
    }
    const {{field.type_cpp.full}}& Get{{field.name}}() const {
        return {{field.name}};
    }
                                                                                                    {%- endif -%}
                                                                                                    {%- if field.is_repeated %}
    void Add{{field.name}}(const {{field.type_cpp.base}}& {{field.name_lcamelcase}}) {
        {{field.name}}.push_back({{field.name_lcamelcase}});
    }
                                                                                                    {%- endif %}

                                                                                            {%- endfor %}
                                                                                            {%- for field in messages.TSampleProto.oneofs %}
    const {{field.type}} Get{{field.name}}() const {
        return {{field.name}};
    }
                                                                                                {%- for u in field.fields %}
    void Set{{field.name}}(const {{u.type_cpp.full}}& value) {
        {{field.name}} = value;
    }
                                                                                                {%- endfor %}
    > {{field.type}};
                                                                                            {%- endfor %}
};
