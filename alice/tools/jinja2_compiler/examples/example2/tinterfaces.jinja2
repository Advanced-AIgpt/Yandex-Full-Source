//
// Autogenerated file
// This file was created from TInterfaces.proto and TInterfaces.jinja2 template
//
// Don't edit it manually!
// Please refer to doc: https://TODO for more information about custom codegeneration
//

struct TSupportedIterfacesBase {
public:
                                                                                            {%- for field in messages.TInterfacesExample.fields -%}
                                                                                                {%- for c in field.comments %}
    {{c}}
                                                                                                {%- endfor %}
                                                                                                {%- if field.options.deprecated %}
    /* [[ deprecated ]] */
                                                                                                {%- endif %}
    virtual {{ field.type_cpp.base }} Get{{field.name}}() const
                                                                                                {%- if field.options.feature -%}
                                                                                                    {%- if field.options.feature_type == 'SimpleSupport' -%}
 {
        return SupportedFeatures.contains("{{field.options.feature}}");
    }
                                                                                                    {%- elif field.options.feature_type == 'SupportUnsupportTrue' or field.options.feature_type == 'SupportUnsupportFalse' -%}
 {
        if (SupportedFeatures.contains("{{field.options.feature}}")) {
            return true;
        }
        if (UnsupportedFeatures.contains("{{field.options.feature}}")) {
            return false;
        }
                                                                                                        {%- if field.options.feature_type == 'SupportUnsupportTrue' %}
        return true;
                                                                                                        {%- else %}
        return false;
                                                                                                        {%- endif %}
    }
                                                                                                    {%- else -%}
 = 0;
                                                                                                    {%- endif -%}
                                                                                                {%- else -%}
 = 0; // This field is an extension or doesnt contains valid definition
                                                                                                {%- endif -%}
                                                                                            {%- endfor %}
protected:
    explicit TSupportedIterfaces(const TSpeechKitRequestProto& proto) {
        TClientFeatures clientFeatures{proto.GetApplication(), expFlags};
        for (const auto& feature : proto.GetRequest().GetAdditionalOptions().GetSupportedFeatures()) {
            clientFeatures.AddSupportedFeature(feature);
        }
        for (const auto& feature : proto.GetRequest().GetAdditionalOptions().GetUnsupportedFeatures()) {
            clientFeatures.AddUnsupportedFeature(feature);
        }
    }
    virtual ~TSupportedIterfaces() {
    }
private:
    TSet<TString> SupportedFeatures;
    TSet<TString> UnsupportedFeatures;
};
