from datetime import datetime, timedelta


class BranchParser(object):

    _months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']

    def parse_for_dt(self, dt):
        wd = dt.weekday()

        branches = []

        # MEGAMIND - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ and —á–µ—Ç–≤–µ—Ä–≥ 02:00
        if wd in [3, 6]:
            branches.append(f'*02:00 {dt.day} {self._months[dt.month - 1]}*: ‚öôÔ∏è [Megamind + VINS + BASS]')

        # HOLLYWOOD - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ and —Å—Ä–µ–¥–∞ 04:00
        if wd in [2, 6]:
            branches.append(f'*04:00 {dt.day} {self._months[dt.month - 1]}*: üé≠ [Hollywood]')

        # APPHOST -  —Å—Ä–µ–¥–∞ and —Å—É–±–±–æ—Ç–∞ 01:00
        if wd in [2, 5]:
            branches.append(f'*01:00 {dt.day} {self._months[dt.month - 1]}*: üï∏ [–≥—Ä–∞—Ñ—ã AppHost –ê–ª–∏—Å—ã]')

        # UNIPROXY - –ø—è—Ç–Ω–∏—Ü–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤–µ—á–µ—Ä
        if wd == 4:
            branches.append(f'*–≤–µ—á–µ—Ä {dt.day} {self._months[dt.month - 1]} - {(dt+timedelta(days=2)).day} {self._months[(dt+timedelta(days=2)).month - 1]}*: üé§ [Uniproxy]')

        # BEGEMOT - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—á–µ—Ç–≤–µ—Ä–≥ –≤–µ—á–µ—Ä
        if wd in [0, 3]:
            branches.append(f'*–≤–µ—á–µ—Ä {dt.day} {self._months[dt.month - 1]}*: ü¶õ [Begemot]')

        return branches

    def parse(self):
        msg = '–°–ø–∏—Å–æ–∫ –æ—Ç–≤–æ–¥–∞ –≤–µ—Ç–æ–∫ –≤ –±—É–¥—É—â–∏–µ –¥–Ω–∏:\n\n'

        branches = []

        now = datetime.now()
        for day_delta in range(8):
            dt = now + timedelta(days=day_delta)
            branches.extend(self.parse_for_dt(dt))

        msg += '\n'.join(branches)
        return msg
