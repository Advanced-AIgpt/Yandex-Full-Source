import "robot/rthub/yql/generic_protos/ydb.proto";

package NRTLog;

message TEventItem {
    optional bytes ReqId = 1 [json_name = "reqid", (NRobot.key_column_name) = "reqid"];
    optional int64 ReqTimestamp = 2 [json_name = "req_ts", (NRobot.key_column_name) = "req_ts"];
    optional bytes ActivationId = 3 [json_name = "activation_id", (NRobot.key_column_name) = "activation_id"];
    optional uint64 FrameId = 4 [json_name = "frame_id", (NRobot.key_column_name) = "frame_id"];
    optional uint64 EventIndex = 5 [json_name = "event_index", (NRobot.key_column_name) = "event_index"];

    optional uint64 InstanceId = 6 [json_name = "instance_id", (NRobot.column_name) = "instance_id"];
    optional uint64 Timestamp = 7 [json_name = "ts", (NRobot.column_name) = "ts"];
    optional bytes EventType = 8 [json_name = "event_type", (NRobot.column_name) = "event_type"];
    optional bytes Event = 9 [json_name = "event", (NRobot.column_name) = "event", (NRobot.type) = JSON];

    optional bytes ServiceName = 10 [json_name = "service_name"];

    optional bytes EventBinary = 11 [json_name = "event_binary", (NRobot.column_name) = "event_binary"];
}

message TEventIndexItem {
    optional bytes Key = 1 [(NRobot.key_column_name) = "key"];
    optional int64 ReqTimestamp = 2 [(NRobot.key_column_name) = "req_ts"];
    optional bytes ReqId = 3 [(NRobot.key_column_name) = "reqid"];
    optional bytes ActivationId = 4 [(NRobot.key_column_name) = "activation_id"];
    optional uint64 FrameId = 5 [(NRobot.key_column_name) = "frame_id"];
    optional uint64 EventIndex = 6 [(NRobot.key_column_name) = "event_index"];
}

message TFrameIndexItem {
    optional uint64 Key = 1 [(NRobot.key_column_name) = "key"];
    optional int64 ReqTimestamp = 2 [(NRobot.key_column_name) = "req_ts"];
    optional uint32 InstanceId = 3 [(NRobot.key_column_name) = "instance_id"];
    optional uint32 SegmentTimestamp = 4 [(NRobot.key_column_name) = "segment_ts"];
    optional uint32 Offset = 5 [(NRobot.key_column_name) = "offset"];
    optional uint32 Size = 6 [(NRobot.column_name) = "size"];
    optional uint32 EventIndex = 7 [(NRobot.column_name) = "event_index"];
    optional bytes ReqId = 8 [(NRobot.column_name) = "reqid"];
}

message TSpecialEventItem {
    optional bytes ReqId = 1 [(NRobot.key_column_name) = "reqid"];
    optional bytes ActivationId = 2 [(NRobot.key_column_name) = "activation_id"];
    optional int64 ReqTimestamp = 3 [(NRobot.key_column_name) = "req_ts"];

    optional uint64 Timestamp = 4 [(NRobot.column_name) = "ts"];
    optional bytes EventType = 5 [(NRobot.column_name) = "event_type"];
    optional bytes Event = 6 [(NRobot.column_name) = "event", (NRobot.type) = UTF8];
}

message TRecord {
    optional TEventItem EventItem = 1;
    optional TEventIndexItem EventIndexItem = 2;
    optional TSpecialEventItem SpecialEventItem = 3;
    optional TErrorEventItem ErrorEventItem = 4;
}

/*
  [gmikee]
  If change TErrorEventItem, make it synced with error-booster-proto/src/main/proto/Error.proto 
  check it on https://github.yandex-team.ru/market-infra/market-health
*/

message TErrorEventItem {
    optional bytes Stack = 1;
    optional bytes Dc = 2;
    optional bytes Level = 3;
    optional bytes Slots = 4;
    optional bytes Reqid = 5;
    optional bytes Method = 6;
    optional bytes Source = 7;
    optional bytes SourceMethod = 8;
    optional bytes SourceType = 9;
    optional bool IsInternal = 10;
    optional bool IsRobot = 11;
    optional bytes Host = 12;
    optional bytes File = 13;
    optional bytes Message = 14;
    optional bytes Project = 15;
    optional bytes Service = 16;
    optional bytes Ip = 17;
    optional bytes Experiments = 18;
    optional bytes Platform = 19;
    optional bytes Block = 20;
    optional bytes Language = 21;
    optional bytes Region = 22;
    optional bytes Version = 23;
    optional bytes Yandexuid = 24;
    optional bytes Env = 25;
    optional bytes Useragent = 26;
    optional uint64 Timestamp = 27;
    optional bytes Url = 28;
    reserved 29; // Additional
    optional bytes Page = 30;
    optional bytes Fingerprint = 31;
    optional uint64 Line = 32;
}
