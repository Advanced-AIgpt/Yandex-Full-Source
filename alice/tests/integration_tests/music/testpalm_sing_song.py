import re

import alice.tests.library.auth as auth
import alice.tests.library.directives as directives
import alice.tests.library.intent as intent
import alice.tests.library.surface as surface
import pytest


@pytest.mark.voice
@pytest.mark.oauth(auth.YandexPlus)
@pytest.mark.parametrize('surface', [
    surface.automotive,
    surface.launcher,
    surface.navi,
    surface.searchapp,
    surface.yabro_win
])
class TestPalmSingSong(object):
    """
    https://testpalm.yandex-team.ru/testcase/alice-1090
    https://testpalm.yandex-team.ru/testcase/alice-1524
    https://testpalm.yandex-team.ru/testcase/alice-1560
    """

    owners = ('zhigan', )
    common_expected_suggests = {
        '–ï—â–µ –ø–µ—Å–Ω—é!',
        '–°–ª—É—à–∞—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ!',
    }
    opus_regexp = re.compile(r'<speaker audio="sing_song_\d+.opus">')

    def _assert_response(self, alice, response, expected_intent, command=None):
        assert response.intent == expected_intent
        assert response.text in [
            '–°–∞–º–∏ –Ω–∞–ø—Ä–æ—Å–∏–ª–∏—Å—å!',
            '–¢–∞–Ω—Ü—É—é—Ç –≤—Å–µ!',
            '–°–µ–π—á–∞—Å —Å–ø–æ—é!',
            '–¢–∞–Ω—Ü—É–π—Ç–µ!',
            '–ü–æ–µ—Ö–∞–ª–∏!',
            '–ú–∞—Ä—à –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —à—Ç—É—Ä–º–æ–≤–∏–∫–æ–≤!',
            '–í–æ—Ç –Ω–µ—Ç–ª–µ–Ω–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä.',
            '–í–æ—Ç –∫–æ–µ-—á—Ç–æ –∏–∑ —Ä–∞–Ω–Ω–µ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.',
            '–í–æ—Ç –∏–∑ –º–æ–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª—å–±–æ–º–∞. –ò –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.',
            '–°—Ç–∏—Ö–∏ –∞–≤—Ç–æ–ø–æ—ç—Ç–∞, –º—É–∑—ã–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è. –ò—Å–ø–æ–ª–Ω—è–µ—Ç –ê–ª–∏—Å–∞.',
            '–£ –º–µ–Ω—è –∞–ª—å–±–æ–º —Ç—É—Ç –≤—ã—à–µ–ª, –≤–æ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä –∏–∑ —Å–≤–µ–∂–µ–≥–æ —á—Ç–æ –µ—Å—Ç—å.',
        ]
        assert response.has_voice_response()
        assert re.search(self.opus_regexp, response.output_speech_text)

        response_suggests = {suggest.title for suggest in response.suggests}
        expected_suggests = self.common_expected_suggests.copy()
        if surface.is_navi(alice):
            expected_suggests.add('–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?')
        elif surface.is_launcher(alice) or surface.is_searchapp(alice) or surface.is_yabro_win(alice):
            expected_suggests |= {'–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?', 'üëç', 'üëé'}
            if command is not None:
                expected_suggests.add(f'üîç "{command.lower()}"')

        assert response_suggests == expected_suggests

    def test_sing_song(self, alice):
        command = '–°–ø–æ–π –ø–µ—Å–Ω—é'
        response = alice(command)
        self._assert_response(alice, response, intent.MusicSingSong, command)
        first_song = re.search(self.opus_regexp, response.output_speech_text)[0]

        command = '–ï—â–µ –ø–µ—Å–Ω—é'
        response = alice(command)
        self._assert_response(alice, response, intent.MusicSingSongNext, command)
        other_song = re.search(self.opus_regexp, response.output_speech_text)[0]
        assert other_song != first_song

        if not surface.is_auto(alice):
            listen_on_yandex_music = response.suggest('–°–ª—É—à–∞—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ!')
            assert listen_on_yandex_music
            response = alice.click(listen_on_yandex_music)

            if surface.is_navi(alice):
                assert response.text == '–í–∫–ª—é—á–∞—é: –ê–ª–∏—Å–∞, –∞–ª—å–±–æ–º "YANY".'
            else:
                assert response.text == '–í–∫–ª—é—á–∞—é –∞–ª—å–±–æ–º'
            assert response.intent == intent.MusicPlay
            assert response.directive.name == directives.names.OpenUriDirective
            assert '4924870' in response.directive.payload.uri

        command = '–ó–∞—á–∏—Ç–∞–π —Ä—ç–ø'
        response = alice(command)
        self._assert_response(alice, response, intent.MusicSingSong, command)

        command = '–°–ø–æ–π —á—Ç–æ –Ω–∏–±—É–¥—å'
        response = alice(command)
        self._assert_response(alice, response, intent.MusicSingSong, command)
