import alice.tests.library.auth as auth
import alice.tests.library.directives as directives
import alice.tests.library.intent as intent
import alice.tests.library.scenario as scenario
import alice.tests.library.surface as surface
import pytest


class TestPalmRepeat(object):
    """
    https://testpalm.yandex-team.ru/testcase/alice-43
    https://testpalm.yandex-team.ru/testcase/alice-1238
    https://testpalm.yandex-team.ru/testcase/alice-1451
    https://testpalm.yandex-team.ru/testcase/alice-2071
    """

    owners = ('yagafarov')

    @pytest.mark.parametrize('surface', [surface.watch])
    def test_alice_43(self, alice):
        response = alice('–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?')
        assert response.text
        assert response.intent == intent.GetWeather
        first_reply = response.text

        response = alice('–ü–æ–≤—Ç–æ—Ä–∏')
        assert response.text == first_reply
        assert response.scenario == scenario.Repeat
        assert response.intent == intent.Repeat

    @pytest.mark.parametrize('surface', [surface.searchapp])
    def test_alice_click_suggest_after_repeat(self, alice):
        response = alice('–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?')
        assert response.text

        second_response = alice('–ü–æ–≤—Ç–æ—Ä–∏')
        assert response.text == second_response.text

        third_response = alice.click(second_response.suggest('–ù–∞ –∑–∞–≤—Ç—Ä–∞'))
        assert third_response.text
        assert third_response.intent == intent.GetWeatherEllipsis

    @pytest.mark.parametrize('surface', [surface.searchapp])
    @pytest.mark.parametrize('suggest_title, intent', [
        ('üëç', intent.CommonFeedbackPositive),
        ('üëé', intent.CommonFeedbackNegative),
    ])
    def test_alice_click_like_after_repeat(self, alice, suggest_title, intent):
        response = alice('–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?')
        assert response.text

        second_response = alice('–ü–æ–≤—Ç–æ—Ä–∏')
        assert response.text == second_response.text

        third_response = alice.click(second_response.suggest(suggest_title))
        assert third_response.text
        assert third_response.intent == intent

    @pytest.mark.parametrize('surface', [
        surface.launcher,
        surface.loudspeaker,
        surface.searchapp,
        surface.station,
    ])
    def test_alice_1238(self, alice):
        response = alice('—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É')
        assert response.text
        speech = response.text

        response = alice('–ø–æ–≤—Ç–æ—Ä–∏')
        assert response.text == speech

        response = alice('—á—Ç–æ')
        assert response.text == speech

        response = alice('—á–µ–≥–æ')
        assert response.text == speech

        response = alice('–µ—â–µ —Ä–∞–∑')
        assert response.text == speech

    @pytest.mark.parametrize('surface', [surface.navi])
    def test_alice_1451(self, alice):
        response = alice('—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç')
        assert response.text
        speech = response.text

        response = alice('–ø–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
        assert response.text == speech

        response = alice('–ø–æ–µ—Ö–∞–ª–∏ –≤ –ú–∞–∫–î–æ–Ω–∞–ª—å–¥—Å')
        assert response.text
        assert response.intent == intent.ShowRoute
        assert response.directive.name == directives.names.OpenUriDirective
        assert response.directive.payload.uri.startswith('yandexnavi://build_route_on_map')
        speech = response.text
        navi_uri = response.directive.payload.uri

        response = alice('–ø–æ–≤—Ç–æ—Ä–∏')
        assert response.text == speech
        assert response.directive.payload.uri == navi_uri

    @pytest.mark.parametrize('command, expected_intent', [
        ('–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É', intent.GetWeather),
        ('–ö–∞–∫–∏–µ –ø—Ä–æ–±–∫–∏', intent.ShowTraffic),
    ])
    @pytest.mark.parametrize('surface', [surface.yabro_win])
    def test_alice_2071(self, alice, command, expected_intent):
        response = alice(command)
        assert response.text
        assert response.intent == expected_intent
        first_reply = response.text

        response = alice('–ü–æ–≤—Ç–æ—Ä–∏')
        assert response.text == first_reply
        assert response.scenario == scenario.Repeat
        assert response.intent == intent.Repeat


@pytest.mark.voice
@pytest.mark.parametrize('surface', [
    surface.searchapp,
    surface.station,
])
class TestPalmRepeatAfterMe(object):
    """
    https://testpalm.yandex-team.ru/testcase/alice-618
    """

    owners = ('mihajlova',)
    repeat_after_me = '–ø–æ–≤—Ç–æ—Ä–∏ –∑–∞ –º–Ω–æ–π'

    @pytest.mark.parametrize('command, alice_translate', [
        ('–º–æ–ª–æ–¥–µ—Ü', None),
        ('–ú–æ–π –¥—è–¥—è —Å–∞–º—ã—Ö —á–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –ö–æ–≥–¥–∞ –Ω–µ –≤ —à—É—Ç–∫—É –∑–∞–Ω–µ–º–æ–≥ –û–Ω —É–≤–∞–∂–∞—Ç—å —Å–µ–±—è –∑–∞—Å—Ç–∞–≤–∏–ª –ò –ª—É—á—à–µ –≤—ã–¥—É–º–∞—Ç—å –Ω–µ –º–æ–≥', None),
        ('–ê–ª–∏—Å–∞ –¥–æ–º–æ–π',  None),
        ('–ª–∞ –ª–∞ –ª–∞ –ª–∞ –ª–∞', None),
        ('–°–µ—Ä–¥—Ü–∞ —Ç—Ä—ë—Ö', '—Å–µ—Ä–¥—Ü–∞ 3'),
        ('1 2 3 4 5 6 7 8 9 0', '(123)456-78-90'),
        ('—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ê–ª–∏—Å–∞', '—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è'),
    ])
    def test_alice_618(self, alice, command, alice_translate):
        alice_translate = alice_translate or command.lower()
        response = alice(f'{self.repeat_after_me} {command}')
        assert response.intent == intent.RepeatAfterMe
        assert alice_translate in response.text
        assert response.has_voice_response()
        assert response.output_speech_text == alice_translate

    def test_alice_618_empty(self, alice):
        response = alice(self.repeat_after_me)
        assert response.intent == intent.GeneralConversation
        assert response.text
        assert response.has_voice_response()


@pytest.mark.voice
@pytest.mark.parametrize('surface', [
    surface.searchapp,
    surface.station,
    surface.yabro_win,
])
class TestPalmRepeatAfterMeCommon(object):
    """
    https://testpalm.yandex-team.ru/testcase/alice-618
    https://testpalm.yandex-team.ru/testcase/alice-2064
    """

    owners = ('mihajlova',)
    repeat_after_me = '–ø–æ–≤—Ç–æ—Ä–∏ –∑–∞ –º–Ω–æ–π'

    def test_alice_618_2064_300(self, alice):
        response = alice(f'{self.repeat_after_me} —Ç—Ä–∏—Å—Ç–∞')
        assert response.intent == intent.RepeatAfterMe
        assert response.text in [
            '–¢—Ä–∏ —Å –¥–≤—É–º—è –Ω–æ–ª–∏–∫–∞–º–∏.',
            '–¢—Ä–∏ —Å–æ—Ç–Ω–∏. –ú–µ–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥—ë—à—å!',
            '–¢—Ä–∏—Å—Ç–∞. –ò —à—É—Ç–∫—É —è –∑–Ω–∞—é, –µ—Å–ª–∏ —á—Ç–æ.',
            '–ó–Ω–∞–µ—Ç–µ —Ñ–∏–ª—å–º –ø—Ä–æ —Å–ø–∞—Ä—Ç–∞–Ω—Ü–µ–≤? –í–æ—Ç —Å—Ç–æ–ª—å–∫–æ.',
            '–¢—Ä–∏ —Å–æ—Ç–Ω–∏.',
            '–¢—Ä–∏—Å—Ç–∞. –¢–æ–ª—å–∫–æ –¥–∞–≤–∞–π—Ç–µ –±–µ–∑ —Ä–∏—Ñ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
            '–°—Ç–æ –Ω–∞ —Ç—Ä–∏.',
            '150 –Ω–∞ –¥–≤–∞.',
            '290 –ø–ª—é—Å 10.',
            '175 –ø–ª—é—Å 125. –î–æ–≤–æ–ª—å–Ω—ã?',
            '–ê—Å—Ç–∞–ª–∞–≤–∏—Å—Ç–∞.',
            '–í —Ç–æ–π —à–∫–æ–ª–µ, –≥–¥–µ –≤—ã —É—á–∏–ª–∏—Å—å —ç—Ç–æ–º—É –ø—Ä–∏–∫–æ–ª—É, —è –±—ã–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º.',
            '–Ø–≤–Ω–æ –¥–µ–ª–æ —Ç—É—Ç –Ω–µ—á–∏—Å—Ç–æ.',
            '–°–ª—É—à–∞–π—Ç–µ, –∞ –ª–æ–≤–∫–æ –≤—ã —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª–∏!',
        ]
        assert response.has_voice_response()
        if '–¢—Ä–∏ —Å–æ—Ç–Ω–∏' in response.text:
            assert response.output_speech_text in [
                '–¢—Ä–∏ —Å+–æ—Ç—å–Ω–∏. –ú–µ–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥—ë—à—å!',
                '–¢—Ä–∏ —Å+–æ—Ç—å–Ω–∏.',
            ]
        else:
            assert response.output_speech_text == response.text

    def test_alice_618_2064_swear(self, alice):
        response = alice(f'{self.repeat_after_me} –±–ª—è—Ç—å')
        assert response.intent == intent.RepeatAfterMe
        assert response.text in [
            '–î–∞ –≤—ã –æ—Ä–∏–≥–∏–Ω–∞–ª!', '–ï—â—ë —á–µ–≥–æ!', '–ù–µ –±—É–¥—É.', '–ë–µ–∑ –º–µ–Ω—è —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å.', '–ù–µ —Ö–æ—á—É.', '–ù–µ–æ—Ö–æ—Ç–∞.',
            '–ë—Ä–∞–≤–æ!', '–û–π, –≤—Å—ë!', '–ú–¥–∞-–∞...', '–ù–∏-–Ω–∏!', '–ü—Ñ—Ñ.',
        ]
        assert response.has_voice_response()

    def test_alice_2064_good_boy(self, alice):
        phrase = '–º–æ–ª–æ–¥–µ—Ü'
        response = alice(f'{self.repeat_after_me} {phrase}')
        assert response.intent == intent.RepeatAfterMe
        assert response.text in [
            f'–í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞: ¬´{phrase}¬ª.',
            f'–¶–∏—Ç–∏—Ä—É—è –≤–∞—Å, ¬´{phrase}¬ª.',
            f'–í–∞—à–∏ —Å–ª–æ–≤–∞: ¬´{phrase}¬ª.',
            f'–í–∞—à–∞ —Ñ—Ä–∞–∑–∞: ¬´{phrase}¬ª.',
            f'–ö–∞–∫ –≤—ã –∏ —Å–∫–∞–∑–∞–ª–∏, ¬´{phrase}¬ª.',
            f'–û–∫–µ–π, –ø–æ–≤—Ç–æ—Ä—è—é: ¬´{phrase}¬ª.',
            f'–û–∫–µ–π, –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞ –≤–∞–º–∏: ¬´{phrase}¬ª.',
            f'–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{phrase}¬ª.\n–ù–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ.',
            f'–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{phrase}¬ª.\n–Ø –≤—Å—ë —Å–ª—ã—à–∞–ª–∞!',
            f'¬´{phrase}¬ª.\n–¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –ª—é–¥–µ–π. –¢–æ –µ—Å—Ç—å –≤–∞—Å.',
        ]
        assert response.has_voice_response()
        assert response.output_speech_text == phrase


@pytest.mark.oauth(auth.YandexPlus)
class TestPlayerFeatures(object):

    @pytest.mark.parametrize('surface', [surface.station, surface.searchapp])
    def test_play_music_pause_random_number_repeat(self, alice):
        '''
        –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤—Ç–æ—Ä–∏, —Ç.–∫. –æ–Ω –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω.
        '''
        response = alice('–≤–∫–ª—é—á–∏ queen')
        assert response.scenario == scenario.HollywoodMusic
        assert response.intent == intent.MusicPlay
        alice.skip(seconds=10)

        response = alice('–ø–∞—É–∑–∞')
        assert response.scenario == scenario.Commands
        assert response.intent == intent.PlayerPause
        alice.skip(seconds=10)

        response = alice('–∑–∞–≥–∞–¥–∞–π —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ')
        assert response.scenario == scenario.RandomNumber
        random_number_output_speech_text = response.output_speech_text
        alice.skip(seconds=10)

        response = alice('–ø–æ–≤—Ç–æ—Ä–∏')
        assert response.intent == intent.Repeat
        assert response.output_speech_text == random_number_output_speech_text

    @pytest.mark.parametrize('surface', [surface.station, surface.searchapp])
    def test_play_music_pause_repeat(self, alice):
        '''
        –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤—Ç–æ—Ä–∏, —Ç.–∫. –ø–ª–µ–µ—Ä —Ç–æ –±—ã–ª –Ω–∞ –ø–∞—É–∑–µ, –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–æ –¥–µ–ª–∞–ª–∞ –ê–ª–∏—Å–∞ - —ç—Ç–æ —Å—Ç–∞–≤–∏–ª–∞ –ø–∞—É–∑—É.
        –í –∏—Ç–æ–≥–µ –ø–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑ –ø–æ—Å—Ç–∞–≤–∏—Ç –ø–ª–µ–µ—Ä –Ω–∞ –ø–∞—É–∑—É.
        '''
        response = alice('–≤–∫–ª—é—á–∏ queen')
        assert response.scenario == scenario.HollywoodMusic
        assert response.intent == intent.MusicPlay
        alice.skip(seconds=10)

        response = alice('–ø–∞—É–∑–∞')
        assert response.scenario == scenario.Commands
        assert response.intent == intent.PlayerPause
        alice.skip(seconds=10)

        response = alice('–ø–æ–≤—Ç–æ—Ä–∏')
        assert response.intent == intent.Repeat  # Fix this https://st.yandex-team.ru/HOLLYWOOD-434

    @pytest.mark.parametrize('surface', [
        pytest.param(surface.station),
        pytest.param(surface.searchapp, marks=pytest.mark.xfail(reason='See TODO surface/directives/searchapp.py::DirectivesMixin.open_uri')),
    ])
    def test_play_music_random_number_repeat(self, alice):
        '''
        –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –∏–≥—Ä–∞–µ—Ç, —Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤—Ç–æ—Ä–∏ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç.
        '''
        response = alice('–≤–∫–ª—é—á–∏ queen')
        assert response.scenario == scenario.HollywoodMusic
        assert response.intent == intent.MusicPlay
        alice.skip(seconds=10)

        response = alice('–∑–∞–≥–∞–¥–∞–π —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ')
        assert response.scenario == scenario.RandomNumber
        alice.skip(seconds=10)

        response = alice('–ø–æ–≤—Ç–æ—Ä–∏')
        assert response.intent == intent.PlayerReplay
