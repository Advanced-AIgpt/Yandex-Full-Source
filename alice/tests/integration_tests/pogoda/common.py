import itertools
import pytz
import re
from datetime import datetime, timedelta

import alice.tests.library.intent as intent
import alice.tests.library.scenario as scenario
from alice.tests.library.vins_response import DivWrapper
from cached_property import cached_property


def assert_is_not_weather_case(response):
    assert response.scenario != scenario.Weather


def assert_is_details_case(response):
    assert response.scenario == scenario.Weather
    assert response.intent == intent.GetWeatherDetails


def assert_is_common_weather_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherEllipsis]
    if not ellipsis:
        matching_intents += [intent.GetWeather, intent.GetWeatherFast]
    assert response.scenario == scenario.Weather
    assert response.intent in matching_intents


def assert_is_not_common_weather_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherEllipsis]
    if not ellipsis:
        matching_intents += [intent.GetWeather, intent.GetWeatherFast]
    assert response.scenario != scenario.Weather or response.intent not in matching_intents


def assert_is_nowcast_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherNowcastEllipsis]
    if not ellipsis:
        matching_intents += [intent.GetWeatherNowcast, intent.GetWeatherNowcastFast]
    assert response.scenario == scenario.Weather
    assert response.intent in matching_intents


def assert_is_not_nowcast_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherNowcastEllipsis]
    if not ellipsis:
        matching_intents += [intent.GetWeatherNowcast, intent.GetWeatherNowcastFast]
    assert response.scenario != scenario.Weather or response.intent not in matching_intents


def assert_is_prec_map_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherNowcastPrecMapEllipsis]
    if not ellipsis:
        matching_intents.append(intent.GetWeatherNowcastPrecMap)
    assert response.scenario == scenario.Weather
    assert response.intent in matching_intents


def assert_is_not_prec_map_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherNowcastPrecMapEllipsis]
    if not ellipsis:
        matching_intents.append(intent.GetWeatherNowcastPrecMap)
    assert response.scenario != scenario.Weather or response.intent not in matching_intents


def assert_is_pressure_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherPressureEllipsis]
    if not ellipsis:
        matching_intents.append(intent.GetWeatherPressure)
    assert response.scenario == scenario.Weather
    assert response.intent in matching_intents


def assert_is_not_pressure_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherPressureEllipsis]
    if not ellipsis:
        matching_intents.append(intent.GetWeatherPressure)
    assert response.scenario != scenario.Weather or response.intent not in matching_intents


def assert_is_wind_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherWindEllipsis]
    if not ellipsis:
        matching_intents.append(intent.GetWeatherWind)
    assert response.scenario == scenario.Weather
    assert response.intent in matching_intents


def assert_is_not_wind_case(response, ellipsis=False):
    matching_intents = [intent.GetWeatherWindEllipsis]
    if not ellipsis:
        matching_intents.append(intent.GetWeatherWind)
    assert response.scenario != scenario.Weather or response.intent not in matching_intents


common_day_parts = ['', '—É—Ç—Ä–æ–º', '–¥–Ω–µ–º', '–≤–µ—á–µ—Ä–æ–º', '–Ω–æ—á—å—é', ]
common_when = ['', '—Å–µ–π—á–∞—Å', '–≤—á–µ—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö', '–Ω–∞ –Ω–µ–¥–µ–ª—é', '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞',
               '3 —Å–µ–Ω—Ç—è–±—Ä—è', '—Å 3 –ø–æ 5 —Å–µ–Ω—Ç—è–±—Ä—è', ]
common_where = ['', '–≤ –º–æ—Å–∫–≤–µ', '–≤ –∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–º –∫—Ä–∞–µ', '–≤ —à—Ç–∞—Ç–µ –≥–∞–≤–∞–π–∏', '–Ω–∞ —Ñ–∞—Ä–µ—Ä—Å–∫–∏—Ö –æ—Å—Ç—Ä–æ–≤–∞—Ö',
                '–≤ –≥–æ—Ä–æ–¥–µ –≥—É—Å—å-—Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π', '–≤ –ø–æ—Å–µ–ª–∫–µ –±–µ—Ä–µ–∑–æ–≤–∫–∞', ]

common_contexts = [re.sub(' +', ' ', f'{where} {when} {day_part}').strip()
                          for (where, when, day_part) in itertools.product(common_where, common_when, common_day_parts)]

now_phrases = ['–°–µ–π—á–∞—Å', '–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è', '–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç', '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', '–í –¥–∞–Ω–Ω—É—é –º–∏–Ω—É—Ç—É', ]


_months = ['', '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è', ]
_weekdays = ['–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫', '–≤ —Å—Ä–µ–¥—É', '–≤ —á–µ—Ç–≤–µ—Ä–≥', '–≤ –ø—è—Ç–Ω–∏—Ü—É', '–≤ —Å—É–±–±–æ—Ç—É', '–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', ]
_days = [
    '–Ω—É–ª–µ–≤–æ–≥–æ', '–ø–µ—Ä–≤–æ–≥–æ', '–≤—Ç–æ—Ä–æ–≥–æ', '—Ç—Ä–µ—Ç—å–µ–≥–æ', '—á–µ—Ç–≤(–µ|—ë)—Ä—Ç–æ–≥–æ', '–ø—è—Ç–æ–≥–æ', '—à–µ—Å—Ç–æ–≥–æ', '—Å–µ–¥—å–º–æ–≥–æ', '–≤–æ—Å—å–º–æ–≥–æ', '–¥–µ–≤—è—Ç–æ–≥–æ',
    '–¥–µ—Å—è—Ç–æ–≥–æ', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ',
    '–¥–≤–∞–¥—Ü–∞—Ç–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤(–µ|—ë)—Ä—Ç–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–≥–æ',
    '–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç–æ–≥–æ', '—Ç—Ä–∏–¥—Ü–∞—Ç–æ–≥–æ', '—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ',
]


def get_day(delta=0):
    dt = datetime.today() + timedelta(days=delta)
    return f'{dt.day} {_months[dt.month]}'


def get_month(delta=0):
    dt = datetime.today() + timedelta(days=delta*30)
    return _months[dt.month]


def get_day_regex(command):
    for day in range(31, 0, -1):
        if str(day) in command:
            return command.replace(str(day), _days[day])
    return command


def get_weekday(delta=0):
    dt = datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(days=delta)
    return _weekdays[dt.weekday()]


class WeatherDivCard(DivWrapper):
    @property
    def title(self):
        return self.data[1].title

    @property
    def subtitle(self):
        return self.data[3].text

    @cached_property
    def day_time(self):
        return [_.text for _ in self.data[6][0]]

    @cached_property
    def days(self):
        return [_.first.text for _ in self.data[3]]


class PogodaDialogBase(object):

    owners = ('sparkle', 'abc:weatherbackendvteam',)

    @staticmethod
    def _assert_unknown_where(text, where):
        assert any(text.startswith(phrase) for phrase in [
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,',
            '–ò–∑–≤–∏–Ω–∏—Ç–µ,',
            '–ü—Ä–æ—Å—Ç–∏—Ç–µ,',
            '–£–≤—ã, –Ω–æ',
        ])
        assert any(phrase + ' –≥–¥–µ —ç—Ç–æ ' in text for phrase in [
            '—è –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å,',
            '—è –Ω–µ –∑–Ω–∞—é,',
        ])
        assert f'"{where}"' in text

    @staticmethod
    def _list_eq_re(text_list, re_list, ignore_case=True):
        if len(text_list) != len(re_list):
            return False
        for idx in range(len(text_list)):
            if ignore_case:
                sought = re.search(re_list[idx].replace(',', ''), text_list[idx], re.IGNORECASE)
            else:
                sought = re.search(re_list[idx], text_list[idx])
            if not sought:
                return False
        return True

    @staticmethod
    def _build_searchapp_suggests_re(suggests, command=None, search_suggest_is_last=True):
        result = [r'^üëç$', r'^üëé$']
        if not command:
            result.extend(suggests)
        else:
            res = []
            for com in [command, get_day_regex(command)]:
                com = com.replace(',', '')
                search_phrase = com[:20] + com[20:].split(' ', 1)[0]
                res.append(r'^üîç "{}{}\??"$'.format(search_phrase, '.*' if len(com) > len(search_phrase) else ''))
            search_suggest = f'({res[0]}|{res[1]})'
            if search_suggest_is_last:
                # –õ—É–ø–∞ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∞–¥–∂–µ—Å—Ç
                result.extend(suggests)
                result.append(search_suggest)
            else:
                # –õ—É–ø–∞ —Å –ø–æ–∏—Å–∫–æ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∞–¥–∂–µ—Å—Ç
                result.extend(suggests[:-1])
                result.append(search_suggest)
                result.append(suggests[-1])
        return result
