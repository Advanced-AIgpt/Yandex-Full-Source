import re

import alice.tests.library.auth as auth
import alice.tests.library.directives as directives
import alice.tests.library.intent as intent
import alice.tests.library.region as region
import alice.tests.library.scenario as scenario
import alice.tests.library.surface as surface
import pytest


@pytest.mark.oauth(auth.Yandex)
class TestPalmFmRadio(object):
    """
    https://testpalm.yandex-team.ru/testcase/alice-1346
    https://testpalm.yandex-team.ru/testcase/alice-1347
    https://testpalm.yandex-team.ru/testcase/alice-1530
    """

    owners = ('zhigan', )

    @pytest.mark.parametrize('surface', [surface.searchapp])
    def test_radio_1346_onboarding(self, alice):
        response = alice('–≤–∫–ª—é—á–∏ —Ä–∞–¥–∏–æ')
        assert re.search(r'–í–∫–ª—é—á–∞—é|–û–∫–µ–π!|–•–æ—Ä–æ—à–æ!', response.text)
        assert response.scenario == scenario.Vins
        assert response.intent == intent.RadioPlay
        assert response.directive.name == directives.names.OpenUriDirective
        assert response.directive.payload.uri.startswith('http://music.yandex.ru/fm/')

    @pytest.mark.parametrize('surface', [surface.searchapp])
    @pytest.mark.parametrize('command_radio, radio_name, radio_path', [
        pytest.param(
            '–±–∏–∑–Ω–µ—Å —Ñ–º',
            'Business FM',
            'business_fm',
            marks=pytest.mark.region(region.Moscow),
        ),
        pytest.param(
            '—Ä—É—Å—Å–∫–æ–µ —Ä–∞–¥–∏–æ',
            '–†—É—Å—Å–∫–æ–µ —Ä–∞–¥–∏–æ',
            'rusradio',
            marks=pytest.mark.region(region.Moscow),
        ),
        pytest.param(
            '–º–æ–Ω—Ç–µ –∫–∞—Ä–ª–æ',
            '–ú–æ–Ω—Ç–µ –ö–∞—Ä–ª–æ',
            'monte_carlo',
            marks=[
                pytest.mark.region(region.Moscow),
                pytest.mark.xfail(reason='https://st.yandex-team.ru/DIALOG-7257')
            ],
        ),
        pytest.param(
            '—Ä–∞–¥–∏–æ –¥–∂–∞–∑',
            '–†–∞–¥–∏–æ JAZZ',
            'jazz',
            marks=[
                pytest.mark.region(region.Moscow),
                pytest.mark.xfail(reason='https://st.yandex-team.ru/MUSICBACKEND-6205')
            ],
        ),
        pytest.param(
            '–∞–≤—Ç–æ—Ä–∞–¥–∏–æ',
            '–ê–≤—Ç–æ—Ä–∞–¥–∏–æ',
            'avtoradio',
            marks=pytest.mark.region(region.StPetersburg),
        ),
        pytest.param(
            '–º–∞—è–∫',
            '–ú–∞—è–∫',
            'mayak',
            marks=[
                pytest.mark.region(region.StPetersburg),
                pytest.mark.xfail(reason='https://st.yandex-team.ru/DIALOG-7257')
            ],
        ),
        pytest.param(
            '—Ä–∞–¥–∏–æ —ç–Ω–µ—Ä–¥–∂–∏',
            '–†–∞–¥–∏–æ Energy',
            'energy',
            marks=pytest.mark.region(region.StPetersburg),
        )
    ])
    def test_radio_1346_1347(self, alice, command_radio, radio_name, radio_path):
        command = f'–í–∫–ª—é—á–∏ {command_radio}'
        response = alice(command)

        assert radio_name in response.text
        assert response.scenario == scenario.Vins
        assert response.intent == intent.RadioPlay
        assert response.directive.name == directives.names.OpenUriDirective
        assert response.directive.payload.uri == f'http://music.yandex.ru/fm/{radio_path}'

        expected_suggests = {'üëç', 'üëé', f'üîç "{command}"', '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'}
        response_suggests = {suggest.title for suggest in response.suggests}
        assert response_suggests == expected_suggests

    @pytest.mark.parametrize('surface', [surface.searchapp])
    @pytest.mark.parametrize('radio_name, uri', [
        pytest.param(
            '—ç–ª—å–¥–æ—Ä–∞–¥–∏–æ',
            'http://eldoradio.ru',
            marks=pytest.mark.region(region.Moscow),
        ),
        pytest.param(
            '–º–æ—Å–∫–≤–∞ —Ñ–º',
            'https://www.mosfm.com',
            marks=pytest.mark.region(region.StPetersburg),
        )
    ])
    def test_alice_1347(self, alice, radio_name, uri):
        command = f'–í–∫–ª—é—á–∏ {radio_name}'
        response = alice(command)

        assert re.match('^–Ø –µ—â—ë –Ω–µ (–ø–æ–π–º–∞–ª–∞ —ç—Ç—É –≤–æ–ª–Ω—É|–Ω–∞—Å—Ç—Ä–æ–∏–ª–∞—Å—å –Ω–∞ —ç—Ç—É (–≤–æ–ª–Ω—É|—Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é)). –ù–æ —è –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å –µ—ë —Å–∞–π—Ç.$', response.text)
        assert response.scenario == scenario.Vins
        assert response.intent == intent.RadioPlay
        assert response.directive.name == directives.names.OpenUriDirective
        assert response.directive.payload.uri == uri, response.text

        expected_suggests = {'üëç', 'üëé', f'üîç "{command}"', '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'}
        response_suggests = {suggest.title for suggest in response.suggests}
        assert response_suggests == expected_suggests

    @pytest.mark.parametrize('surface', surface.smart_speakers)
    @pytest.mark.parametrize('command_radio, text, radio_id', [
        pytest.param(
            '–±–∏–∑–Ω–µ—Å —Ñ–º',
            '(–†|—Ä)–∞–¥–∏–æ "Business FM"',
            'business_fm',
            marks=pytest.mark.region(region.Moscow),
        ),
        pytest.param(
            '—Ä—É—Å—Å–∫–æ–µ —Ä–∞–¥–∏–æ',
            '"–†—É—Å—Å–∫–æ–µ —Ä–∞–¥–∏–æ"',
            'rusradio',
            marks=pytest.mark.region(region.Moscow),
        ),
        pytest.param(
            '—Ä–∞–¥–∏–æ –¥–∂–∞–∑',
            '"–†–∞–¥–∏–æ JAZZ"',
            'jazz',
            marks=[
                pytest.mark.region(region.Moscow),
                pytest.mark.xfail(reason='https://st.yandex-team.ru/MUSICBACKEND-6205')
            ],
        ),
        pytest.param(
            '—Ö–∏—Ç —Ñ–º',
            '(–†|—Ä)–∞–¥–∏–æ "–•–∏—Ç FM"',
            'hit_fm',
            marks=pytest.mark.region(region.Moscow),
        ),
        pytest.param(
            '–Ω–∞—à–µ —Ä–∞–¥–∏–æ',
            '"–ù–∞—à–µ —Ä–∞–¥–∏–æ"',
            'nashe',
            marks=pytest.mark.region(region.Moscow),
        ),
        pytest.param(
            '—Ä–∞–¥–∏–æ –¥–∞—á–∞',
            '"–†–∞–¥–∏–æ –î–∞—á–∞"',
            'radio_dacha',
            marks=pytest.mark.region(region.StPetersburg),
        ),
        pytest.param(
            '—Ç–∞–∫—Å–∏ —Ñ–º',
            '(–†|—Ä)–∞–¥–∏–æ "–¢–∞–∫—Å–∏ FM"',
            'taxi_fm',
            marks=[
                pytest.mark.region(region.StPetersburg),
                pytest.mark.xfail(reason='https://st.yandex-team.ru/MUSICBACKEND-6205')
            ],
        ),
        pytest.param(
            '—Ä–∞–¥–∏–æ –†–æ—Å—Å–∏–∏',
            '"–†–∞–¥–∏–æ –†–æ—Å—Å–∏–∏"',
            'radio_russia',
            marks=[
                pytest.mark.region(region.StPetersburg),
                pytest.mark.xfail(reason='https://st.yandex-team.ru/ALICEINFRA-795')
            ],
        ),
    ])
    def test_alice_1530(self, alice, command_radio, text, radio_id):
        response = alice(f'–í–∫–ª—é—á–∏ {command_radio}')

        assert re.match(f'(–í–∫–ª—é—á–∞—é|–û–∫–µ–π!|–•–æ—Ä–æ—à–æ!) {text}.', response.text)
        assert response.scenario == scenario.Vins
        assert response.intent == intent.RadioPlay

        assert response.directive.name == directives.names.RadioPlayDirective
        assert response.directive.payload.radioId == radio_id
