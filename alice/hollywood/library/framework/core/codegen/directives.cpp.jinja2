//
// Autogenerated file
// This file was created from directives.proto and directives.jinja2 template
//
// Don't edit it manually!
// Please refer to doc: https://docs.yandex-team.ru/alice-scenarios/hollywood/main/codegen
// for more information about custom codegeneration
//

#include "gen_directives.pb.h"

#include <alice/megamind/protos/scenarios/directives.pb.h>
#include <alice/megamind/protos/scenarios/response.pb.h>

#include <alice/protos/endpoint/capability.pb.h>
#include <alice/protos/endpoint/common.pb.h>
#include <alice/protos/endpoint/endpoint.pb.h>
#include <alice/protos/endpoint/capabilities/audio_file_player/capability.pb.h>
#include <alice/protos/endpoint/capabilities/battery/capability.pb.h>
#include <alice/protos/endpoint/capabilities/div_view/capability.pb.h>
#include <alice/protos/endpoint/capabilities/iot_scenarios/capability.pb.h>
#include <alice/protos/endpoint/capabilities/layered_div_ui/capability.pb.h>
#include <alice/protos/endpoint/capabilities/opening_sensor/capability.pb.h>
#include <alice/protos/endpoint/capabilities/route_manager/route_manager.pb.h>
#include <alice/protos/endpoint/capabilities/vibration_sensor/capability.pb.h>
#include <alice/protos/endpoint/capabilities/water_leak_sensor/capability.pb.h>

namespace NAlice::NHollywoodFw {
namespace {

template <class T>
class TCustomDirectiveWrapper final : public TDirectiveWrapper {
public:
    TCustomDirectiveWrapper(T&& directive, T*(NScenarios::TDirective::*fn)(), const TString& name)
        : TDirectiveWrapper(name)
        , Directive_(std::move(directive))
        , Fn_(fn)
    {
    }
    void Attach(NScenarios::TScenarioResponseBody& response) override {
        NScenarios::TDirective directive;
        T& directive2 = *((directive.*Fn_)());
        directive2.CopyFrom(Directive_);
        *(response.MutableLayout()->AddDirectives()) = std::move(directive);
    };
private:
    T Directive_;
    T*(NScenarios::TDirective::*Fn_)();
};

} // anonymous namespace

/*
    Add all compiled directives to response
*/
void TDirectivesWrapper::BuildAnswer(NScenarios::TScenarioResponseBody& response) {
    for (const auto& it : Directives_) {
        it->Attach(response);
    }
}

/*
    Simplified methods - add simple directives w/o name
*/
                                                                                            {%- for field in messages.TDirective.oneofs -%}
                                                                                                {%- for u in field.fields %}
                                                                                                    {%- if u.message.field_count == 1 and u.message.fields[0].name == "Name" %}
void TDirectivesWrapper::Add{{u.name}}() {
                                                                                                        {%- if u.message.cpp.parent_name != ""%}
    {{u.message.cpp.namespace}}::{{u.message.cpp.parent_name}}_{{u.type_cpp.full}} directive;
                                                                                                        {%- else %}
    {{u.message.cpp.namespace}}::{{u.type_cpp.full}} directive;
                                                                                                        {%- endif %}
    directive.SetName("{{u.name_lowercase}}");
    Add{{u.name}}(std::move(directive));
}
                                                                                                    {%- endif -%}
                                                                                                {%- endfor -%}
                                                                                            {%- endfor %}
/*
    Full access
*/
                                                                                            {%- for field in messages.TDirective.oneofs -%}
                                                                                                {%- for u in field.fields %}
                                                                                                    {%- if u.message.cpp.parent_name != "" %}
void TDirectivesWrapper::Add{{u.name}}({{u.message.cpp.namespace}}::{{u.message.cpp.parent_name}}_{{u.type_cpp.full}}&& directive) {
    auto p = std::make_shared<TCustomDirectiveWrapper<{{u.message.cpp.namespace}}::{{u.message.cpp.parent_name}}_{{u.type_cpp.full}}>>(
        std::move(directive), &NScenarios::TDirective::Mutable{{u.name_ucamelcase}}, "{{u.name_lowercase}}");
                                                                                                    {%- else %}
void TDirectivesWrapper::Add{{u.name}}({{u.message.cpp.namespace}}::{{u.type_cpp.full}}&& directive) {
    auto p = std::make_shared<TCustomDirectiveWrapper<{{u.message.cpp.namespace}}::{{u.type_cpp.full}}>>(
        std::move(directive), &NScenarios::TDirective::Mutable{{u.name_ucamelcase}}, "{{u.name_lowercase}}");
                                                                                                    {%- endif %}
    Directives_.push_back(p);
}
                                                                                                {%- endfor -%}
                                                                                            {%- endfor %}
} // namespace NAlice::NHollywoodFw
