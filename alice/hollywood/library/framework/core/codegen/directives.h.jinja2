#pragma once

//
// Autogenerated file
// This file was created from directives.proto and directives.jinja2 template
//
// Don't edit it manually!
// Please refer to doc: https://docs.yandex-team.ru/alice-scenarios/hollywood/main/codegen
// for more information about custom codegeneration
//

#include <util/generic/string.h>
#include <util/generic/vector.h>

//
// Forward declarations
//
namespace NAlice::NScenarios {
    class TScenarioResponseBody;
}
                                                                                            {%- for field in messages.TDirective.oneofs -%}
                                                                                                {%- for u in field.fields %}
namespace {{u.message.cpp.namespace}} {
                                                                                                    {%- if u.message.cpp.parent_name != "" %}
    class {{u.message.cpp.parent_name}}_{{u.type_cpp.full}};
                                                                                                    {%- else %}
    class {{u.type_cpp.full}};
                                                                                                    {%- endif %}
} // namespace {{u.message.cpp.namespace}}
                                                                                                {%- endfor -%}
                                                                                            {%- endfor %}

namespace NAlice::NHollywoodFw {

//
// Forward declarations
//
class TRender;

//
// Internal interface for Directives containes
//
class TDirectiveWrapper {
public:
    explicit TDirectiveWrapper(const TString& name)
        : Name_(name)
    {
    }
    virtual ~TDirectiveWrapper() = default;
    virtual void Attach(NAlice::NScenarios::TScenarioResponseBody& response) = 0;
    const TString& GetName() const {
        return Name_;
    }
protected:
    TString Name_;
};
//
// Wrapper for directives
//
class TDirectivesWrapper {
public:
    //
    // Simplified list of directives
    //
                                                                                            {%- for field in messages.TDirective.oneofs -%}
                                                                                                {%- for u in field.fields %}
                                                                                                    {%- if u.message.field_count == 1 and u.message.fields[0].name == "Name" %}
    void Add{{u.name}}();
                                                                                                    {%- endif -%}
                                                                                                {%- endfor -%}
                                                                                            {%- endfor %}
    //
    // Full list of directives
    //
                                                                                            {%- for field in messages.TDirective.oneofs -%}
                                                                                                {%- for u in field.fields %}
                                                                                                    {%- for uu in u.message.fields %}
                                                                                                        {%- if uu.options.LanguageDependent and uu.options.LanguageDependent != "None" %}
    // NOTE: the field {{u.type_cpp.full}}::{{uu.name}} must be set with translation: {{uu.options.LanguageDependent}}
                                                                                                        {%- endif -%}
                                                                                                    {%- endfor -%}
                                                                                                    {%- if u.message.cpp.parent_name != "" %}
    void Add{{u.name}}({{u.message.cpp.namespace}}::{{u.message.cpp.parent_name}}_{{u.type_cpp.full}}&& directive);
                                                                                                    {%- else %}
    void Add{{u.name}}({{u.message.cpp.namespace}}::{{u.type_cpp.full}}&& directive);
                                                                                                    {%- endif %}
                                                                                                {%- endfor -%}
                                                                                            {%- endfor %}

    // For internal using only
    void BuildAnswer(NAlice::NScenarios::TScenarioResponseBody& response);
private:
    TVector<std::shared_ptr<TDirectiveWrapper>> Directives_;
};
} // namespace NAlice::NHollywoodFw
