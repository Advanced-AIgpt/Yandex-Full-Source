#pragma once

//
// Autogenerated file
// This file was created from directives.proto and directives.jinja2 template
//
// Don't edit it manually!
// Please refer to doc: https://docs.yandex-team.ru/alice-scenarios/hollywood/main/codegen
// for more information about custom codegeneration
//

#include <util/generic/string.h>
#include <util/generic/vector.h>

//
// Forward declarations
//
namespace NAlice::NScenarios {
    class TScenarioResponseBody;
}
namespace NAlice::NScenarios {
    class TCallbackDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenDialogDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TUpdateDialogInfoDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenUriDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TEndDialogSessionDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTypeTextDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTypeTextSilentDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TCloseDialogDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TStartImageRecognizerDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TThereminPlayDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TMordoviaShowDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TMordoviaCommandDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TMusicPlayDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSoundSetLevelDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TCarDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TYandexNaviDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerNextTrackDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerPreviousTrackDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerPauseDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerContinueDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerLikeDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerDislikeDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerShuffleDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerOrderDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerReplayDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerRepeatDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPlayerRewindDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSoundQuiterDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSoundLouderDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSoundMuteDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSoundUnmuteDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TStartMusicRecognizerDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAlarmSetSoundDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAlarmResetSoundDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAlarmNewDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowAlarmsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowTimersDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TFindContactsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetCookiesDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetSearchFilterDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAlarmsUpdateDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TResumeTimerDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TCancelTimerDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetTimerDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TStopBluetoothDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TStartBluetoothDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TReadPageDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TReadPagePauseDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TReadPageContinueDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSearchLocalDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenFolderDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenFileDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenSoftDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPowerOffDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class THibernateDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TRestartPcDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TMuteDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TUnmuteDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenDefaultBrowserDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenYaBrowserDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenFlashCardDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenStartDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenDiskDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TOpenSettingsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TGoForwardDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TGoBackwardDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TGoToTheBeginningDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TGoToTheEndDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TGoHomeDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowVideoDescriptionDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TVideoPlayDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowGalleryDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowPayPushScreenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowSeasonGalleryDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPauseTimerDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTimerStopPlayingDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TNavigateBrowserDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TRadioPlayDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TGoDownDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TGoTopDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TGoUpDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TScreenOffDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowTvGalleryDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAlarmStopDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAlarmSetMaxLevelDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TMusicRecognitionDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TMessengerCallDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSaveVoiceprintDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAudioPlayDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAudioStopDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TRemoveVoiceprintDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TChangeAudioDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TChangeSubtitlesDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TDrawLedScreenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSendBugReportDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAudioRewindDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TNotifyDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TUpdateNotificationSubscriptionDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TStartMultiroomDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TMarkNotificationAsReadDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowVideoSettingsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TStartBroadcastDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TStopBroadcastDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTtsPlayPlaceholderDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetupRcuDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetupRcuAutoDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetupRcuCheckDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetupRcuManualDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetupRcuAdvancedDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TForceDisplayCardsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TScreenOnDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TIoTDiscoveryStartDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TIoTDiscoveryCredentialsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TIoTDiscoveryStopDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TClearQueueDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSuccessStartingOnboardingDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAddCardDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TRotateCardsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TListenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowViewDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetMainScreenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowLoginDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowPlusPurchaseDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowPlusPromoDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetSmartTvCategoriesDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTvOpenSearchScreenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTvOpenDetailsScreenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTvOpenSeriesScreenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTvOpenPersonScreenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTvOpenCollectionScreenDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowButtonsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetGlagolMetadataDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TFindRcuDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TRemindersCancelDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TRequestPermissionsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TRemindersSetDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTvSetCarouselsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TTvSetSingleCarouselDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSendAndroidAppIntentDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TDrawScledAnimationsDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TStopMultiroomDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowClockDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class THideClockDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TFillCloudUiDirective;
} // namespace NAlice::NScenarios
namespace NAlice {
    class TOnOffCapability_TOnOffDirective;
} // namespace NAlice
namespace NAlice {
    class TIotDiscoveryCapability_TStartDiscoveryDirective;
} // namespace NAlice
namespace NAlice {
    class TIotDiscoveryCapability_TFinishDiscoveryDirective;
} // namespace NAlice
namespace NAlice {
    class TIotDiscoveryCapability_TForgetDevicesDirective;
} // namespace NAlice
namespace NAlice::NScenarios {
    class TDoNotDisturbOnDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TDoNotDisturbOffDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TSetUpperShutterDirective;
} // namespace NAlice::NScenarios
namespace NAlice {
    class TLevelCapability_TSetAbsoluteLevelDirective;
} // namespace NAlice
namespace NAlice {
    class TLevelCapability_TSetRelativeLevelDirective;
} // namespace NAlice
namespace NAlice {
    class TLevelCapability_TStartMoveLevelDirective;
} // namespace NAlice
namespace NAlice {
    class TLevelCapability_TStopMoveLevelDirective;
} // namespace NAlice
namespace NAlice::NScenarios {
    class TEnrollmentStartDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TEnrollmentCancelDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TEnrollmentFinishDirective;
} // namespace NAlice::NScenarios
namespace NAlice {
    class TColorCapability_TSetColorSceneDirective;
} // namespace NAlice
namespace NAlice {
    class TWebOSCapability_TWebOSLaunchAppDirective;
} // namespace NAlice
namespace NAlice {
    class TWebOSCapability_TWebOSShowGalleryDirective;
} // namespace NAlice
namespace NAlice {
    class TIotDiscoveryCapability_TStartTuyaBroadcastDirective;
} // namespace NAlice
namespace NAlice {
    class TIotDiscoveryCapability_TRestoreNetworksDirective;
} // namespace NAlice
namespace NAlice {
    class TIotDiscoveryCapability_TCancelDiscoveryDirective;
} // namespace NAlice
namespace NAlice {
    class TIotDiscoveryCapability_TDeleteNetworksDirective;
} // namespace NAlice
namespace NAlice::NScenarios {
    class TMultiroomSemanticFrameDirective;
} // namespace NAlice::NScenarios
namespace NAlice {
    class TColorCapability_TSetTemperatureKDirective;
} // namespace NAlice
namespace NAlice {
    class TAnimationCapability_TDrawAnimationDirective;
} // namespace NAlice
namespace NAlice {
    class TEqualizerCapability_TSetAdjustableEqualizerBandsDirective;
} // namespace NAlice
namespace NAlice {
    class TEqualizerCapability_TSetFixedEqualizerBandsDirective;
} // namespace NAlice
namespace NAlice {
    class TVideoCallCapability_TStartVideoCallLoginDirective;
} // namespace NAlice
namespace NAlice {
    class TVideoCallCapability_TStartVideoCallDirective;
} // namespace NAlice
namespace NAlice {
    class TVideoCallCapability_TAcceptVideoCallDirective;
} // namespace NAlice
namespace NAlice {
    class TVideoCallCapability_TDiscardVideoCallDirective;
} // namespace NAlice
namespace NAlice {
    class TRouteManagerCapability_TStartDirective;
} // namespace NAlice
namespace NAlice {
    class TRouteManagerCapability_TStopDirective;
} // namespace NAlice
namespace NAlice {
    class TRouteManagerCapability_TShowDirective;
} // namespace NAlice
namespace NAlice::NScenarios {
    class TWebViewMediaSessionPlayDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TWebViewMediaSessionPauseDirective;
} // namespace NAlice::NScenarios
namespace NAlice {
    class TRouteManagerCapability_TContinueDirective;
} // namespace NAlice
namespace NAlice::NScenarios {
    class TOpenScreensaverDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TPatchViewDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TAudioMultiroomAttach;
} // namespace NAlice::NScenarios
namespace NAlice {
    class TDivViewCapability_TStashViewDirective;
} // namespace NAlice
namespace NAlice {
    class TDivViewCapability_TUnstashViewDirective;
} // namespace NAlice
namespace NAlice::NScenarios {
    class THideViewDirective;
} // namespace NAlice::NScenarios
namespace NAlice::NScenarios {
    class TShowPromoDirective;
} // namespace NAlice::NScenarios
namespace NAlice {
    class TIotScenariosCapability_TAddIotScenariosDirective;
} // namespace NAlice
namespace NAlice {
    class TIotScenariosCapability_TRemoveIotScenariosDirective;
} // namespace NAlice
namespace NAlice {
    class TIotScenariosCapability_TSyncIotScenariosDirective;
} // namespace NAlice
namespace NAlice::NScenarios {
    class TMultiaccountRemoveAccountDirective;
} // namespace NAlice::NScenarios

namespace NAlice::NHollywoodFw {

//
// Forward declarations
//
class TRender;

//
// Internal interface for Directives containes
//
class TDirectiveWrapper {
public:
    explicit TDirectiveWrapper(const TString& name)
        : Name_(name)
    {
    }
    virtual ~TDirectiveWrapper() = default;
    virtual void Attach(NAlice::NScenarios::TScenarioResponseBody& response) = 0;
    const TString& GetName() const {
        return Name_;
    }
protected:
    TString Name_;
};
//
// Wrapper for directives
//
class TDirectivesWrapper {
public:
    //
    // Simplified list of directives
    //
    void AddPlayerShuffleDirective();
    void AddPlayerOrderDirective();
    void AddPlayerReplayDirective();
    void AddPlayerRepeatDirective();
    void AddSoundMuteDirective();
    void AddSoundUnmuteDirective();
    void AddStartMusicRecognizerDirective();
    void AddAlarmResetSoundDirective();
    void AddShowAlarmsDirective();
    void AddShowTimersDirective();
    void AddStopBluetoothDirective();
    void AddStartBluetoothDirective();
    void AddReadPageDirective();
    void AddReadPagePauseDirective();
    void AddReadPageContinueDirective();
    void AddPowerOffDirective();
    void AddHibernateDirective();
    void AddRestartPcDirective();
    void AddMuteDirective();
    void AddUnmuteDirective();
    void AddOpenDefaultBrowserDirective();
    void AddOpenYaBrowserDirective();
    void AddOpenFlashCardDirective();
    void AddOpenStartDirective();
    void AddGoForwardDirective();
    void AddGoToTheBeginningDirective();
    void AddGoToTheEndDirective();
    void AddGoHomeDirective();
    void AddGoDownDirective();
    void AddGoTopDirective();
    void AddGoUpDirective();
    void AddScreenOffDirective();
    void AddAlarmStopDirective();
    void AddShowVideoSettingsDirective();
    void AddStopBroadcastDirective();
    void AddSetupRcuDirective();
    void AddSetupRcuCheckDirective();
    void AddSetupRcuManualDirective();
    void AddSetupRcuAdvancedDirective();
    void AddForceDisplayCardsDirective();
    void AddScreenOnDirective();
    void AddIoTDiscoveryStopDirective();
    void AddClearQueueDirective();
    void AddSuccessStartingOnboardingDirective();
    void AddShowLoginDirective();
    void AddShowPlusPurchaseDirective();
    void AddShowPlusPromoDirective();
    void AddFindRcuDirective();
    void AddShowClockDirective();
    void AddHideClockDirective();
    void AddDoNotDisturbOnDirective();
    void AddDoNotDisturbOffDirective();
    void AddStopMoveLevelDirective();
    void AddIotCancelDiscoveryDirective();
    void AddRouteManagerStartDirective();
    void AddRouteManagerStopDirective();
    void AddRouteManagerShowDirective();
    void AddRouteManagerContinueDirective();
    void AddOpenScreensaverDirective();
    void AddShowPromoDirective();
    //
    // Full list of directives
    //
    void AddCallbackDirective(NAlice::NScenarios::TCallbackDirective&& directive);
    void AddOpenDialogDirective(NAlice::NScenarios::TOpenDialogDirective&& directive);
    void AddUpdateDialogInfoDirective(NAlice::NScenarios::TUpdateDialogInfoDirective&& directive);
    void AddOpenUriDirective(NAlice::NScenarios::TOpenUriDirective&& directive);
    void AddEndDialogSessionDirective(NAlice::NScenarios::TEndDialogSessionDirective&& directive);
    // NOTE: the field TTypeTextDirective::Text must be set with translation: NlgText
    void AddTypeTextDirective(NAlice::NScenarios::TTypeTextDirective&& directive);
    // NOTE: the field TTypeTextSilentDirective::Text must be set with translation: NlgText
    void AddTypeTextSilentDirective(NAlice::NScenarios::TTypeTextSilentDirective&& directive);
    void AddCloseDialogDirective(NAlice::NScenarios::TCloseDialogDirective&& directive);
    void AddStartImageRecognizerDirective(NAlice::NScenarios::TStartImageRecognizerDirective&& directive);
    void AddThereminPlayDirective(NAlice::NScenarios::TThereminPlayDirective&& directive);
    void AddMordoviaShowDirective(NAlice::NScenarios::TMordoviaShowDirective&& directive);
    void AddMordoviaCommandDirective(NAlice::NScenarios::TMordoviaCommandDirective&& directive);
    void AddMusicPlayDirective(NAlice::NScenarios::TMusicPlayDirective&& directive);
    void AddSoundSetLevelDirective(NAlice::NScenarios::TSoundSetLevelDirective&& directive);
    void AddCarDirective(NAlice::NScenarios::TCarDirective&& directive);
    void AddYandexNaviDirective(NAlice::NScenarios::TYandexNaviDirective&& directive);
    void AddPlayerNextTrackDirective(NAlice::NScenarios::TPlayerNextTrackDirective&& directive);
    void AddPlayerPreviousTrackDirective(NAlice::NScenarios::TPlayerPreviousTrackDirective&& directive);
    void AddPlayerPauseDirective(NAlice::NScenarios::TPlayerPauseDirective&& directive);
    void AddPlayerContinueDirective(NAlice::NScenarios::TPlayerContinueDirective&& directive);
    void AddPlayerLikeDirective(NAlice::NScenarios::TPlayerLikeDirective&& directive);
    void AddPlayerDislikeDirective(NAlice::NScenarios::TPlayerDislikeDirective&& directive);
    void AddPlayerShuffleDirective(NAlice::NScenarios::TPlayerShuffleDirective&& directive);
    void AddPlayerOrderDirective(NAlice::NScenarios::TPlayerOrderDirective&& directive);
    void AddPlayerReplayDirective(NAlice::NScenarios::TPlayerReplayDirective&& directive);
    void AddPlayerRepeatDirective(NAlice::NScenarios::TPlayerRepeatDirective&& directive);
    void AddPlayerRewindDirective(NAlice::NScenarios::TPlayerRewindDirective&& directive);
    void AddSoundQuiterDirective(NAlice::NScenarios::TSoundQuiterDirective&& directive);
    void AddSoundLouderDirective(NAlice::NScenarios::TSoundLouderDirective&& directive);
    void AddSoundMuteDirective(NAlice::NScenarios::TSoundMuteDirective&& directive);
    void AddSoundUnmuteDirective(NAlice::NScenarios::TSoundUnmuteDirective&& directive);
    void AddStartMusicRecognizerDirective(NAlice::NScenarios::TStartMusicRecognizerDirective&& directive);
    void AddAlarmSetSoundDirective(NAlice::NScenarios::TAlarmSetSoundDirective&& directive);
    void AddAlarmResetSoundDirective(NAlice::NScenarios::TAlarmResetSoundDirective&& directive);
    void AddAlarmNewDirective(NAlice::NScenarios::TAlarmNewDirective&& directive);
    void AddShowAlarmsDirective(NAlice::NScenarios::TShowAlarmsDirective&& directive);
    void AddShowTimersDirective(NAlice::NScenarios::TShowTimersDirective&& directive);
    void AddFindContactsDirective(NAlice::NScenarios::TFindContactsDirective&& directive);
    void AddSetCookiesDirective(NAlice::NScenarios::TSetCookiesDirective&& directive);
    void AddSetSearchFilterDirective(NAlice::NScenarios::TSetSearchFilterDirective&& directive);
    void AddAlarmsUpdateDirective(NAlice::NScenarios::TAlarmsUpdateDirective&& directive);
    void AddResumeTimerDirective(NAlice::NScenarios::TResumeTimerDirective&& directive);
    void AddCancelTimerDirective(NAlice::NScenarios::TCancelTimerDirective&& directive);
    void AddSetTimerDirective(NAlice::NScenarios::TSetTimerDirective&& directive);
    void AddStopBluetoothDirective(NAlice::NScenarios::TStopBluetoothDirective&& directive);
    void AddStartBluetoothDirective(NAlice::NScenarios::TStartBluetoothDirective&& directive);
    void AddReadPageDirective(NAlice::NScenarios::TReadPageDirective&& directive);
    void AddReadPagePauseDirective(NAlice::NScenarios::TReadPagePauseDirective&& directive);
    void AddReadPageContinueDirective(NAlice::NScenarios::TReadPageContinueDirective&& directive);
    void AddSearchLocalDirective(NAlice::NScenarios::TSearchLocalDirective&& directive);
    void AddOpenFolderDirective(NAlice::NScenarios::TOpenFolderDirective&& directive);
    void AddOpenFileDirective(NAlice::NScenarios::TOpenFileDirective&& directive);
    void AddOpenSoftDirective(NAlice::NScenarios::TOpenSoftDirective&& directive);
    void AddPowerOffDirective(NAlice::NScenarios::TPowerOffDirective&& directive);
    void AddHibernateDirective(NAlice::NScenarios::THibernateDirective&& directive);
    void AddRestartPcDirective(NAlice::NScenarios::TRestartPcDirective&& directive);
    void AddMuteDirective(NAlice::NScenarios::TMuteDirective&& directive);
    void AddUnmuteDirective(NAlice::NScenarios::TUnmuteDirective&& directive);
    void AddOpenDefaultBrowserDirective(NAlice::NScenarios::TOpenDefaultBrowserDirective&& directive);
    void AddOpenYaBrowserDirective(NAlice::NScenarios::TOpenYaBrowserDirective&& directive);
    void AddOpenFlashCardDirective(NAlice::NScenarios::TOpenFlashCardDirective&& directive);
    void AddOpenStartDirective(NAlice::NScenarios::TOpenStartDirective&& directive);
    void AddOpenDiskDirective(NAlice::NScenarios::TOpenDiskDirective&& directive);
    void AddOpenSettingsDirective(NAlice::NScenarios::TOpenSettingsDirective&& directive);
    void AddGoForwardDirective(NAlice::NScenarios::TGoForwardDirective&& directive);
    void AddGoBackwardDirective(NAlice::NScenarios::TGoBackwardDirective&& directive);
    void AddGoToTheBeginningDirective(NAlice::NScenarios::TGoToTheBeginningDirective&& directive);
    void AddGoToTheEndDirective(NAlice::NScenarios::TGoToTheEndDirective&& directive);
    void AddGoHomeDirective(NAlice::NScenarios::TGoHomeDirective&& directive);
    void AddShowVideoDescriptionDirective(NAlice::NScenarios::TShowVideoDescriptionDirective&& directive);
    void AddVideoPlayDirective(NAlice::NScenarios::TVideoPlayDirective&& directive);
    void AddShowGalleryDirective(NAlice::NScenarios::TShowGalleryDirective&& directive);
    void AddShowPayPushScreenDirective(NAlice::NScenarios::TShowPayPushScreenDirective&& directive);
    void AddShowSeasonGalleryDirective(NAlice::NScenarios::TShowSeasonGalleryDirective&& directive);
    void AddPauseTimerDirective(NAlice::NScenarios::TPauseTimerDirective&& directive);
    void AddTimerStopPlayingDirective(NAlice::NScenarios::TTimerStopPlayingDirective&& directive);
    void AddNavigateBrowserDirective(NAlice::NScenarios::TNavigateBrowserDirective&& directive);
    void AddRadioPlayDirective(NAlice::NScenarios::TRadioPlayDirective&& directive);
    void AddGoDownDirective(NAlice::NScenarios::TGoDownDirective&& directive);
    void AddGoTopDirective(NAlice::NScenarios::TGoTopDirective&& directive);
    void AddGoUpDirective(NAlice::NScenarios::TGoUpDirective&& directive);
    void AddScreenOffDirective(NAlice::NScenarios::TScreenOffDirective&& directive);
    void AddShowTvGalleryDirective(NAlice::NScenarios::TShowTvGalleryDirective&& directive);
    void AddAlarmStopDirective(NAlice::NScenarios::TAlarmStopDirective&& directive);
    void AddAlarmSetMaxLevelDirective(NAlice::NScenarios::TAlarmSetMaxLevelDirective&& directive);
    void AddMusicRecognitionDirective(NAlice::NScenarios::TMusicRecognitionDirective&& directive);
    void AddMessengerCallDirective(NAlice::NScenarios::TMessengerCallDirective&& directive);
    void AddSaveVoiceprintDirective(NAlice::NScenarios::TSaveVoiceprintDirective&& directive);
    void AddAudioPlayDirective(NAlice::NScenarios::TAudioPlayDirective&& directive);
    void AddAudioStopDirective(NAlice::NScenarios::TAudioStopDirective&& directive);
    void AddRemoveVoiceprintDirective(NAlice::NScenarios::TRemoveVoiceprintDirective&& directive);
    void AddChangeAudioDirective(NAlice::NScenarios::TChangeAudioDirective&& directive);
    void AddChangeSubtitlesDirective(NAlice::NScenarios::TChangeSubtitlesDirective&& directive);
    void AddDrawLedScreenDirective(NAlice::NScenarios::TDrawLedScreenDirective&& directive);
    void AddSendBugReportDirective(NAlice::NScenarios::TSendBugReportDirective&& directive);
    void AddAudioRewindDirective(NAlice::NScenarios::TAudioRewindDirective&& directive);
    void AddNotifyDirective(NAlice::NScenarios::TNotifyDirective&& directive);
    void AddUpdateNotificationSubscriptionDirective(NAlice::NScenarios::TUpdateNotificationSubscriptionDirective&& directive);
    void AddStartMultiroomDirective(NAlice::NScenarios::TStartMultiroomDirective&& directive);
    void AddMarkNotificationAsReadDirective(NAlice::NScenarios::TMarkNotificationAsReadDirective&& directive);
    void AddShowVideoSettingsDirective(NAlice::NScenarios::TShowVideoSettingsDirective&& directive);
    void AddStartBroadcastDirective(NAlice::NScenarios::TStartBroadcastDirective&& directive);
    void AddStopBroadcastDirective(NAlice::NScenarios::TStopBroadcastDirective&& directive);
    void AddTtsPlayPlaceholderDirective(NAlice::NScenarios::TTtsPlayPlaceholderDirective&& directive);
    void AddSetupRcuDirective(NAlice::NScenarios::TSetupRcuDirective&& directive);
    void AddSetupRcuAutoDirective(NAlice::NScenarios::TSetupRcuAutoDirective&& directive);
    void AddSetupRcuCheckDirective(NAlice::NScenarios::TSetupRcuCheckDirective&& directive);
    void AddSetupRcuManualDirective(NAlice::NScenarios::TSetupRcuManualDirective&& directive);
    void AddSetupRcuAdvancedDirective(NAlice::NScenarios::TSetupRcuAdvancedDirective&& directive);
    void AddForceDisplayCardsDirective(NAlice::NScenarios::TForceDisplayCardsDirective&& directive);
    void AddScreenOnDirective(NAlice::NScenarios::TScreenOnDirective&& directive);
    void AddIoTDiscoveryStartDirective(NAlice::NScenarios::TIoTDiscoveryStartDirective&& directive);
    void AddIoTDiscoveryCredentialsDirective(NAlice::NScenarios::TIoTDiscoveryCredentialsDirective&& directive);
    void AddIoTDiscoveryStopDirective(NAlice::NScenarios::TIoTDiscoveryStopDirective&& directive);
    void AddClearQueueDirective(NAlice::NScenarios::TClearQueueDirective&& directive);
    void AddSuccessStartingOnboardingDirective(NAlice::NScenarios::TSuccessStartingOnboardingDirective&& directive);
    void AddAddCardDirective(NAlice::NScenarios::TAddCardDirective&& directive);
    void AddRotateCardsDirective(NAlice::NScenarios::TRotateCardsDirective&& directive);
    void AddListenDirective(NAlice::NScenarios::TListenDirective&& directive);
    void AddShowViewDirective(NAlice::NScenarios::TShowViewDirective&& directive);
    void AddSetMainScreenDirective(NAlice::NScenarios::TSetMainScreenDirective&& directive);
    void AddShowLoginDirective(NAlice::NScenarios::TShowLoginDirective&& directive);
    void AddShowPlusPurchaseDirective(NAlice::NScenarios::TShowPlusPurchaseDirective&& directive);
    void AddShowPlusPromoDirective(NAlice::NScenarios::TShowPlusPromoDirective&& directive);
    void AddSetSmartTvCategoriesDirective(NAlice::NScenarios::TSetSmartTvCategoriesDirective&& directive);
    void AddTvOpenSearchScreenDirective(NAlice::NScenarios::TTvOpenSearchScreenDirective&& directive);
    void AddTvOpenDetailsScreenDirective(NAlice::NScenarios::TTvOpenDetailsScreenDirective&& directive);
    void AddTvOpenSeriesScreenDirective(NAlice::NScenarios::TTvOpenSeriesScreenDirective&& directive);
    void AddTvOpenPersonScreenDirective(NAlice::NScenarios::TTvOpenPersonScreenDirective&& directive);
    void AddTvOpenCollectionScreenDirective(NAlice::NScenarios::TTvOpenCollectionScreenDirective&& directive);
    void AddShowButtonsDirective(NAlice::NScenarios::TShowButtonsDirective&& directive);
    void AddSetGlagolMetadataDirective(NAlice::NScenarios::TSetGlagolMetadataDirective&& directive);
    void AddFindRcuDirective(NAlice::NScenarios::TFindRcuDirective&& directive);
    void AddRemindersCancelDirective(NAlice::NScenarios::TRemindersCancelDirective&& directive);
    void AddRequestPermissionsDirective(NAlice::NScenarios::TRequestPermissionsDirective&& directive);
    void AddRemindersSetDirective(NAlice::NScenarios::TRemindersSetDirective&& directive);
    void AddTvSetCarouselsDirective(NAlice::NScenarios::TTvSetCarouselsDirective&& directive);
    void AddTvSetSingleCarouselDirective(NAlice::NScenarios::TTvSetSingleCarouselDirective&& directive);
    void AddSendAndroidAppIntentDirective(NAlice::NScenarios::TSendAndroidAppIntentDirective&& directive);
    void AddDrawScledAnimationsDirective(NAlice::NScenarios::TDrawScledAnimationsDirective&& directive);
    void AddStopMultiroomDirective(NAlice::NScenarios::TStopMultiroomDirective&& directive);
    void AddShowClockDirective(NAlice::NScenarios::TShowClockDirective&& directive);
    void AddHideClockDirective(NAlice::NScenarios::THideClockDirective&& directive);
    // NOTE: the field TFillCloudUiDirective::Text must be set with translation: NlgText
    void AddFillCloudUiDirective(NAlice::NScenarios::TFillCloudUiDirective&& directive);
    void AddOnOffDirective(NAlice::TOnOffCapability_TOnOffDirective&& directive);
    void AddIotStartDiscoveryDirective(NAlice::TIotDiscoveryCapability_TStartDiscoveryDirective&& directive);
    void AddIotFinishDiscoveryDirective(NAlice::TIotDiscoveryCapability_TFinishDiscoveryDirective&& directive);
    void AddIotForgetDevicesDirective(NAlice::TIotDiscoveryCapability_TForgetDevicesDirective&& directive);
    void AddDoNotDisturbOnDirective(NAlice::NScenarios::TDoNotDisturbOnDirective&& directive);
    void AddDoNotDisturbOffDirective(NAlice::NScenarios::TDoNotDisturbOffDirective&& directive);
    void AddSetUpperShutterDirective(NAlice::NScenarios::TSetUpperShutterDirective&& directive);
    void AddSetAbsoluteLevelDirective(NAlice::TLevelCapability_TSetAbsoluteLevelDirective&& directive);
    void AddSetRelativeLevelDirective(NAlice::TLevelCapability_TSetRelativeLevelDirective&& directive);
    void AddStartMoveLevelDirective(NAlice::TLevelCapability_TStartMoveLevelDirective&& directive);
    void AddStopMoveLevelDirective(NAlice::TLevelCapability_TStopMoveLevelDirective&& directive);
    void AddEnrollmentStartDirective(NAlice::NScenarios::TEnrollmentStartDirective&& directive);
    void AddEnrollmentCancelDirective(NAlice::NScenarios::TEnrollmentCancelDirective&& directive);
    void AddEnrollmentFinishDirective(NAlice::NScenarios::TEnrollmentFinishDirective&& directive);
    void AddSetColorSceneDirective(NAlice::TColorCapability_TSetColorSceneDirective&& directive);
    void AddWebOSLaunchAppDirective(NAlice::TWebOSCapability_TWebOSLaunchAppDirective&& directive);
    void AddWebOSShowGalleryDirective(NAlice::TWebOSCapability_TWebOSShowGalleryDirective&& directive);
    void AddIotStartTuyaBroadcastDirective(NAlice::TIotDiscoveryCapability_TStartTuyaBroadcastDirective&& directive);
    void AddIotRestoreNetworksDirective(NAlice::TIotDiscoveryCapability_TRestoreNetworksDirective&& directive);
    void AddIotCancelDiscoveryDirective(NAlice::TIotDiscoveryCapability_TCancelDiscoveryDirective&& directive);
    void AddIotDeleteNetworksDirective(NAlice::TIotDiscoveryCapability_TDeleteNetworksDirective&& directive);
    void AddMultiroomSemanticFrameDirective(NAlice::NScenarios::TMultiroomSemanticFrameDirective&& directive);
    void AddSetTemperatureKDirective(NAlice::TColorCapability_TSetTemperatureKDirective&& directive);
    void AddDrawAnimationDirective(NAlice::TAnimationCapability_TDrawAnimationDirective&& directive);
    void AddSetAdjustableEqualizerBandsDirective(NAlice::TEqualizerCapability_TSetAdjustableEqualizerBandsDirective&& directive);
    void AddSetFixedEqualizerBandsDirective(NAlice::TEqualizerCapability_TSetFixedEqualizerBandsDirective&& directive);
    void AddStartVideoCallLoginDirective(NAlice::TVideoCallCapability_TStartVideoCallLoginDirective&& directive);
    void AddStartVideoCallDirective(NAlice::TVideoCallCapability_TStartVideoCallDirective&& directive);
    void AddAcceptVideoCallDirective(NAlice::TVideoCallCapability_TAcceptVideoCallDirective&& directive);
    void AddDiscardVideoCallDirective(NAlice::TVideoCallCapability_TDiscardVideoCallDirective&& directive);
    void AddRouteManagerStartDirective(NAlice::TRouteManagerCapability_TStartDirective&& directive);
    void AddRouteManagerStopDirective(NAlice::TRouteManagerCapability_TStopDirective&& directive);
    void AddRouteManagerShowDirective(NAlice::TRouteManagerCapability_TShowDirective&& directive);
    void AddWebViewMediaSessionPlayDirective(NAlice::NScenarios::TWebViewMediaSessionPlayDirective&& directive);
    void AddWebViewMediaSessionPauseDirective(NAlice::NScenarios::TWebViewMediaSessionPauseDirective&& directive);
    void AddRouteManagerContinueDirective(NAlice::TRouteManagerCapability_TContinueDirective&& directive);
    void AddOpenScreensaverDirective(NAlice::NScenarios::TOpenScreensaverDirective&& directive);
    void AddPatchViewDirective(NAlice::NScenarios::TPatchViewDirective&& directive);
    void AddAudioMultiroomAttach(NAlice::NScenarios::TAudioMultiroomAttach&& directive);
    void AddStashViewDirective(NAlice::TDivViewCapability_TStashViewDirective&& directive);
    void AddUnstashViewDirective(NAlice::TDivViewCapability_TUnstashViewDirective&& directive);
    void AddHideViewDirective(NAlice::NScenarios::THideViewDirective&& directive);
    void AddShowPromoDirective(NAlice::NScenarios::TShowPromoDirective&& directive);
    void AddAddIotScenariosDirective(NAlice::TIotScenariosCapability_TAddIotScenariosDirective&& directive);
    void AddRemoveIotScenariosDirective(NAlice::TIotScenariosCapability_TRemoveIotScenariosDirective&& directive);
    void AddSyncIotScenariosDirective(NAlice::TIotScenariosCapability_TSyncIotScenariosDirective&& directive);
    void AddMultiaccountRemoveAccountDirective(NAlice::NScenarios::TMultiaccountRemoveAccountDirective&& directive);

    // For internal using only
    void BuildAnswer(NAlice::NScenarios::TScenarioResponseBody& response);
private:
    TVector<std::shared_ptr<TDirectiveWrapper>> Directives_;
};
} // namespace NAlice::NHollywoodFw
