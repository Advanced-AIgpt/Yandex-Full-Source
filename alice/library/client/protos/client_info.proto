package NAlice;

option go_package = "a.yandex-team.ru/alice/library/client/protos";
option java_package = "ru.yandex.alice.library.client.protos";
option java_outer_classname = "ClientInfoProto";

import "mapreduce/yt/interface/protos/extension.proto";

message TClientInfoProto {
    option (NYT.default_field_flags) = SERIALIZATION_YT;

    reserved "AuthToken"; reserved 13;

    optional string AppId = 1 [json_name = "app_id", (NYT.column_name) = "app_id"];
    optional string AppVersion = 2 [json_name = "app_version", (NYT.column_name) = "app_version"];
    optional string OsVersion = 3 [json_name = "os_version", (NYT.column_name) = "os_version"];
    optional string Platform = 4 [json_name = "platform", (NYT.column_name) = "platform"];
    optional string Uuid = 5 [json_name = "uuid", (NYT.column_name) = "uuid"];
    optional string DeviceId = 6 [json_name = "device_id", (NYT.column_name) = "device_id"];
    optional string Lang = 7 [json_name = "lang", (NYT.column_name) = "lang"]; // application interface language
    optional string ClientTime = 8 [json_name = "client_time", (NYT.column_name) = "client_time"];
    optional string Timezone = 9 [json_name = "timezone", (NYT.column_name) = "timezone"];
    optional string Epoch = 10 [json_name = "timestamp", (NYT.column_name) = "timestamp"];
    optional string DeviceModel = 11 [json_name = "device_model", (NYT.column_name) = "device_model"];
    optional string DeviceManufacturer = 12 [json_name = "device_manufacturer", (NYT.column_name) = "device_manufacturer"];
    optional string DeviceColor = 14 [json_name = "device_color", (NYT.column_name) = "device_color"];
    optional string DeviceRevision = 15 [json_name = "device_revision", (NYT.column_name) = "device_revision"];
    optional string QuasmodromGroup = 16 [json_name = "quasmodrom_group", (NYT.column_name) = "quasmodrom_group"];
    optional string QuasmodromSubgroup = 17 [json_name = "quasmodrom_subgroup", (NYT.column_name) = "quasmodrom_subgroup"];
    optional TMediaDeviceIdentifier MediaDeviceIdentifier = 18 [json_name = "media_device_identifier", (NYT.column_name) = "media_device_identifier"];
    optional string DeviceFirmware = 19 [json_name = "device_firmware", (NYT.column_name) = "device_firmware"];

    message TMediaDeviceIdentifier {
        option (NYT.default_field_flags) = SERIALIZATION_YT;

        // Сервис ОТТ определяет лицензии, доступные для конкретного клиента (на уровне железки)
        // ID сервиса ОТТ
        optional string OttServiceId = 1 [json_name = "ott_service_id", (NYT.column_name) = "ott_service_id"];
        // Название сервиса ОТТ
        optional string OttServiceName = 2 [json_name = "ott_service_name", (NYT.column_name) = "ott_service_name"];
        // Strm from определяет клиента, откуда поступает запрос на стримы. Используется для логирования, аналитики и фильтрации контента
        optional string StrmFrom = 3 [json_name = "strm_from", (NYT.column_name) = "strm_from"];
        // клиент, передаваемый в видеопоиск. Используется для фильтрации определенных источников, данных и лицензий.
        // Так же по этому клиенту определяются параметры запроса во внешние источники (в том числе вх, отт)
        optional string VideoSearchClient = 4 [json_name = "video_search_client", (NYT.column_name) = "video_search_client"];
        // клиент, передаваемый в объектный ответ. Используется для фильтрации определенных источников,
        // а так же для получения специфичных объектных ответов (например, ОО, оптимизированный для видео)
        optional string ObjectResponseClient = 5 [json_name = "object_response_client", (NYT.column_name) = "object_response_client"];
    }
};
